name: Project Sync (Prompts + Docs)
on:
  schedule:
    - cron: '0 2 * * *'
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  spec-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r SPEC/requirements.txt
      - name: Validate SPEC
        run: python SPEC/tools/validate_spec.py

  project-sync:
    needs: spec-validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml pandas
      - name: Run project sync (build + checks)
        run: |
          python project_sync_orchestrator.py
      - name: Generate PR comment
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          python tools/make_pr_comment.py
      - name: Post PR comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('PR_COMMENT.md', 'utf-8');
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const botTag = "<!-- project-sync-comment -->";
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
            const prior = comments.find(c => c.user.type === "Bot" && c.body && c.body.includes(botTag));
            const finalBody = body + "\n\n" + botTag;
            if (prior) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: prior.id, body: finalBody });
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body: finalBody });
            }
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: project-sync-artifacts
          path: |
            sync_report.md
            badges_prompt_status.json
            docs/out/doc_sync_report.md
            docs/out/doc_badge.json
            PR_COMMENT.md

- name: Generate Shields endpoint for traceability
  run: |
    python tools/make_traceability_badge.py

- name: Commit badge (main only)
  if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
  run: |
    git config user.name "github-actions[bot]"
    git config user.email "github-actions[bot]@users.noreply.github.com"
    git add badges/traceability.json
    git commit -m "chore(badge): update traceability badge [skip ci]" || echo "no changes"
    git push


- name: Generate Shields endpoints for prompt coverage
  run: |
    python tools/make_prompt_badges.py

- name: Commit prompt badges (main only)
  if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
  run: |
    git config user.name "github-actions[bot]"
    git config user.email "github-actions[bot]@users.noreply.github.com"
    git add badges/prompt_invariants.json badges/prompt_techniques.json badges/prompt_outputs.json badges/prompt_tests.json
    git commit -m "chore(badge): update prompt coverage badges [skip ci]" || echo "no changes"
    git push


- name: Validate live configs against SPEC schemas
  run: |
    pip install jsonschema PyYAML
    python tools/validate_live_configs.py

- name: Global ID integrity check
  run: |
    python tools/id_integrity_check.py

- name: Forbid manual edits to build artifacts
  run: |
    python tools/enforce_no_manual_edits.py

- name: Sync fingerprint
  run: |
    python tools/fingerprint_sync.py
